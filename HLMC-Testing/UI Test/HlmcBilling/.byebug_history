c
@ct.GetContractTermModels
CTMock::CompareUpdatedCTMock
exit
CTMock::CompareUpdatedCTMock
@ct.GetContractTermModels
exit
self.SetContractTerm(data)
exit
c
exit
c
exit
c
exit
$browser.div(:class => "serviceNameValue truncate").exists?
exit
$browser.div(:class => "serviceNameValue truncate").exists?
$browser.div(:title=>"Delete").div(:class =>"smallDeleteTwoContacts").exist?
$browser.div(:title=>"Delete").div(:class =>"smallDeleteTwoContacts").exists?
$browser.div(:title=>"Delete").div(:class =>"smallDeleteTwoContacts").
$browser.div(:class=>"ContractTermEditModalDialog").div(:class =>"smallDeleteTwoContacts").old_click
$browser.div(:class=>"ContractTermEditModalDialog").div(:class =>"smallDeleteTwoContacts").click
$browser.div(:class=>"ContractTermEditModalDialog").div(:class =>"smallDeleteTwoContacts").visible?
$browser.div(:class=>"ContractTermEditModalDialog").div(:class =>"smallDeleteTwoContacts").exists?
$browser.div(:class =>"smallDeleteTwoContacts").exists?
$browser.ElementByCss(".smallDeleteTwoContacts", 5).exists?
$browser.div(:class =>"smallDeleteTwoContacts").exists?
$browser.ElementByCss(".smallDeleteTwoContacts", 5).exists?
exit
expect(@ct.ContractTermState).to eq ("Not Certified")
@ct.ContractTermState
@ct.ContractTermsState
@ct.ContractTermsState)
c
exit
quit
c
CTMock::CompareCTMock
@ct.GetContractTermModels
c
exit
quit
$browser.ElementByCss(".smallDeleteTwoContacts", 3).click
$browser.ElementByCss(".ContractTermEditModalDialog > a", 3).click
$browser.ElementByCss(".ContractTermEditModalDialog > a", 3).exists?
exit
@ct.GetContractTermModels
c
@ct.GetContractTermModels
c
$browser.file_field(:id=>"fileToUpload").set 'C:\Users\kshrestha\Downloads\brandinglogo.png'
$browser.file_field(:id=>"fileToUpload").set "C:\Users\kshrestha\Downloads\brandinglogo.png"
$browser.input(:id=>"fileToUpload").set "C:\Users\kshrestha\Downloads\92allegoryplugin.gif"
$browser.ElementByCss('.smallEditTwo').click
$browser.ElementByCss('.smallEditTwo").click
$browser.a(:title =>"Edit", :class => "smallEditTwo").click
expect(@ct.GetContractTermModels).to eq(CTMock::CompareCTMock)
c
@ct.GetContractTermModels
c
@ct.GetContractTermModels
CTMock::CompareCTMock
c
CTMock::AddContractTermsMock
@ct.GetContractTermModels
c
`
@ct.GetContractTermModels
c
@ct.GetContractTermModels
c
$browser.ElementByCss('.serviceNameValue').text
$browser.ElementByCss('#.serviceNameValue').text
browser.ElementByCss('#.serviceNameValue').text
browser.ElementByCss('#.serviceNameValue).text
$browser.ElementByCss('#body > div.main-container > div > div.container > div > div.contactWindow > div:nth-child(3) > div:nth-child(2) > div:nth-child(1) > div').text
@ct.GetContractTermModels()
HlmcBillingMock::AddContractTermsMock["Price"]
HlmcBillingMock::AddContractTermsMock
@ct.GetContractTermModels()[0]
@ct.GetContractTermModels()[0])
$browser.iframes
$browser.methods
$browser.page
$browser.p-age
$browser.elements
$browser.html
$browser.title
$brower.title
c
