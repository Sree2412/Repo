exit
end
  end
    return self
    super(timeout)
  def wait_until_present(timeout = nil)
  end
return "Provide method for returning css, not xpath"
#return $browser.execute_script(("%s return getXPath(arguments[0]);" % getXPath), self)
#getXPath = "var getXPath = function calculateXPath( element ){var xpath = '';for ( ; element && element.nodeType == 1; element = element.parentNode ){var id = $(element.parentNode).children(element.tagName).index(element) + 1;id > 1 ? (id = '[' + id + ']') : (id = '');xpath = '/' + element.tagName.toLowerCase() + id + xpath;}return xpath;};"
  def xpath
  end
    old_focus
    $browser.LogMessage(:level => 'info', :action => 'focus', :element => self)
  def focus
  end
    send_keys(*args)
    $browser.LogMessage(:level => 'info', :action => 'send_keys', :element => self)
  def send_keys(*args)
  end
    old_drag_and_drop_by(right_by, down_by)
    $browser.LogMessage(:level => 'info', :action => 'drag_and_drop_by', :element => self)
  def drag_and_drop_by(right_by, down_by)
  end
    old_drag_and_drop_on(other)
    $browser.LogMessage(:level => 'info', :action => 'drag_and_drop_on', :element => self)
  def drag_and_drop_on(other)
  end
    old_hover
    $browser.LogMessage(:level => 'info', :action => 'hover', :element => self)
  def hover
  end
    old_right_click
    $browser.LogMessage(:level => 'info', :action => 'right_click', :element => self)
  def right_click
  end
    old_double_click
    $browser.LogMessage(:level => 'info', :action => 'double_click', :element => self)
  def double_click
  end
    old_click
    $browser.LogMessage(:level => 'info', :action => 'click', :element => self)
  def click
  alias_method :old_focus, :focus
  alias_method :old_send_keys, :send_keys
  alias_method :old_drag_and_drop_by, :drag_and_drop_by
  alias_method :old_drag_and_drop_on, :drag_and_drop_on
  alias_method :old_hover, :hover
  alias_method :old_right_click, :right_click
  alias_method :old_double_click, :double_click
  alias_method :old_click, :click
class Watir::Element
L4R = Log4r::Logger.new("Logger")
SolidAssert.enable_assertions
L4R = Log4r::Logger.new("Logger")
require 'fileutils'
L4R = Log4r::Logger.new("Logger")
require 'log4r'
L4R = Log4r::Logger.new("Logger")
require 'json'
L4R = Log4r::Logger.new("Logger")
require 'solid_assert'
L4R = Log4r::Logger.new("Logger")
require 'watir'
require 'watir-webdriver'
L4R = Log4r::Logger.new("Logger")
quit
L4R = Log4r::Logger.new("Logger")
require 'TestFramework'
L4R = Log4r::Logger.new("Logger")
require 'watir-webdriver'
L4R = Log4r::Logger.new("Logger")
require 'watir'
L4R = Log4r::Logger.new("Logger")
quit
L4R = Log4r::Logger.new("Logger")
Log4r
quit
L4R = Log4r::Logger.new("Logger")
require 'log4r'
require 'rubygems'
Log4r::Logger.new("Logger")
Log4r::INFO
Log4r::Logger.root
Log4r::root
Log4r.root
Log4r::INFO
require 'log4r'
Log4r::INFO
exit
$browser.ElementByCss("#BillingAddButton > a").click
